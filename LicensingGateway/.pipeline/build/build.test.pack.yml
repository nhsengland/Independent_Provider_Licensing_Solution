parameters:
  buildConfiguration: 'Release'

jobs:
  - job:
    displayName: Build Test & Pack
    steps:
      - task: UseDotNet@2
        displayName: Use .NET 8.0.x
        inputs:
          packageType: 'sdk'
          version: '8.0.x'

      - task: NuGetAuthenticate@1

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: restore
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          projects: 'NHSE.Licensing.Gateway.sln'
          command: 'build'
          arguments: '--configuration ${{ parameters.buildConfiguration }}'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish webapp'
        inputs:
          projects: 'Licensing.Gateway/Licensing.Gateway.csproj'
          command: 'publish'
          arguments: '--output publish_output_lg --configuration ${{ parameters.buildConfiguration }} --framework net8.0 --runtime win-x64 --self-contained false'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish function'
        inputs:
          projects: 'Functions/Functions.csproj'
          command: 'publish'
          arguments: '--output publish_output_lg_func --configuration ${{ parameters.buildConfiguration }} --framework net8.0 --runtime win-x64 --self-contained false'
          zipAfterPublish: false
          publishWebProjects: false

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: test
          projects: |
            **/*Tests/*.csproj
            !**/*Integration.Tests/Integration.Tests.csproj
          arguments: '--configuration ${{ parameters.buildConfiguration }} --logger trx --collect "Code coverage"'

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          searchFolder: $(Agent.TempDirectory)
          
      - task: PowerShell@2
        displayName: 'Bicep linter'
        inputs:
          workingDirectory: $(System.DefaultWorkingDirectory)/.iac/
          targetType: 'inline'
          script: az bicep build -f main.bicep
          
      - task: DotNetCoreCLI@2
        displayName: 'Install EF tool'
        inputs:
          command: 'custom'
          custom: 'tool'
          arguments: 'install --global dotnet-ef --version 8.0.0'

      - task: PowerShell@2
        displayName: 'dotnet ef migrations'
        inputs:
          workingDirectory: '$(System.DefaultWorkingDirectory)/Licensing.Gateway'
          targetType: inline
          script: |
            dotnet ef migrations script --project Licensing.Gateway.csproj --output .sql/migrations-script.sql --idempotent --context LicensingGatewayDbContext

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          searchFolder: $(Agent.TempDirectory)
      
      - task: ArchiveFiles@2
        displayName: "Zip Webapp project"
        inputs:
          rootFolderOrFile: "publish_output_lg"
          includeRootFolder: false
          archiveFile: "$(Build.ArtifactStagingDirectory)/Licensing.Gateway.WebApp.zip"
      
      - task: ArchiveFiles@2
        displayName: "Zip Function project"
        inputs:
          rootFolderOrFile: "publish_output_lg_func/Functions"
          includeRootFolder: false
          archiveFile: "$(Build.ArtifactStagingDirectory)/Licensing.Gateway.Functions.zip"

      - publish: $(Build.ArtifactStagingDirectory)/Licensing.Gateway.WebApp.zip
        artifact: Licensing.Gateway.WebApp

      - publish: $(Build.ArtifactStagingDirectory)/Licensing.Gateway.Functions.zip
        artifact: Licensing.Gateway.Functions

      - publish: $(System.DefaultWorkingDirectory)/Licensing.Gateway/.sql/migrations-script.sql
        artifact: Licensing.Gateway.Migration
